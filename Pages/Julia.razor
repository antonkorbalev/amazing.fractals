@page "/julia"

<div class="container text-center">
    <div class="input-group input-group-lg m-3">
        <div class="input-group-prepend">
            <span class="input-group-text" id="inputGroup-sizing-lg">C = </span>
        </div>
        <input type="text" class="form-control floatNumber" aria-label="Large" aria-describedby="inputGroup-sizing-sm" @bind-value="@_cRe"/>
        <div class="input-group-prepend">
            <span class="input-group-text" id="inputGroup-sizing-lg"> +  </span>
        </div>
        <input type="text" class="form-control floatNumber" aria-label="Large" aria-describedby="inputGroup-sizing-sm" @bind-value="@_cIm"/>
        <div class="input-group-prepend">
            <span class="input-group-text" id="inputGroup-sizing-lg"> i  </span>
        </div>
    </div>
    <div class="input-group input-group-lg m-3">
        <div class="input-group-prepend">
            <span class="input-group-text" id="inputGroup-sizing-lg">Max iterations</span>
        </div>
        <input type="text" class="form-control number" aria-label="Large" aria-describedby="inputGroup-sizing-sm" @bind-value="@_maxIterations"/>
        <div class="input-group-prepend">
            <span class="input-group-text" id="inputGroup-sizing-lg">Zoom coeff.</span>
        </div>
        <input type="text" class="form-control number" aria-label="Large" aria-describedby="inputGroup-sizing-sm" @bind-value="@_zoomCoeff"/>
        <div class="input-group-prepend">
            <span class="input-group-text" id="inputGroup-sizing-lg">R</span>
        </div>
        <input type="text" class="form-control number" aria-label="Large" aria-describedby="inputGroup-sizing-sm" @bind-value="@_r"/>
    </div>
    <div class="row m-3">
        <label type="button" class="btn btn-secondary btn-lg m-1 @(_zoomIn ? "disabled" : "")" @onclick="@ZoomIn" >
            <span class="oi oi-zoom-in"></span>
            Zoom in
        </label>
        <label type="button" class="btn btn-secondary btn-lg m-1 @(_zoomIn ? "" : "disabled")" @onclick="@ZoomOut">
            <span class="oi oi-zoom-out"></span>
            Zoom out
        </label>        
        <label type="button" class="btn btn-secondary btn-lg m-1" @onclick="@(() => Generate(true))">Generate Julia Set</label>
    </div>
    <div class="container">
        <label class="text-secondary"> <b>X:</b> from @_fromX.ToString("0.0##") to @_toX.ToString("0.0##"), <b>Y:</b> from @_fromY.ToString("0.0##") to @_toY.ToString("0.0##") </label>
    </div>
    <div class="container w-75 @(_isBusy ? "invisible" : "visible")">
        <img class="@ImgClass"  @onclick="Click"
             src="data:image;base64,@Convert.ToBase64String(_genBytes)"
             alt="Fractal is unavailable"/>
        <div class="spinner-border spinner @(_isBusy ? "visible" : "invisible") text-secondary" role="status">
            <span class="sr-only">Loading...</span>
        </div>
    </div>
</div>

@using amazing.fractals.Data
@inject JuliaGeneratorService GeneratorService
@inject IJSRuntime Jsr;

@code {
    private byte[] _genBytes = new byte[0];
    private double _cRe = -0.7269;
    private double _cIm = 0.21;
    private int _maxIterations = 500;
    private bool _zoomIn = true;
    private bool _isBusy;
    private double _fromX;
    private double _toX;
    private double _fromY;
    private double _toY;
    private double _zoomCoeff = 0.5;
    private double _r = 2;

    private string ImgClass => $"img-fluid border {(_zoomIn ? "cursor-zoom-in" : "cursor-zoom-out")}";

    private void ZoomIn()
    {
        _zoomIn = true;
        StateHasChanged();
    }

    private void ZoomOut()
    {
        _zoomIn = false;
        StateHasChanged();
    }
    
    protected override async Task OnInitializedAsync()
    {
        await Generate(true);
    }

    private async Task Generate(bool reset)
    {
        var winDims = await GetWindowDimensions();
        
        if (reset)
        {
            _fromX = -1.5;
            _fromY = -1.5;
            _toX = 1.5;
            _toY = 1.5;
        }

        if (_zoomCoeff < 0)
            _zoomCoeff = Math.Abs(_zoomCoeff);
        
        await Task.Run(() =>
        {
            _genBytes = new byte[0];
            _isBusy = true;
        })
            .ContinueWith(async (res) =>
            {
                _genBytes = await GeneratorService.Generate(new FractalGenerationData()
                {
                    ImageHeight =  winDims.Height / 4 * 3,
                    ImageWidth = winDims.Width / 4 * 3,
                    CRe = _cRe,
                    CIm = _cIm,
                    MaxIterations = _maxIterations,
                    R = _r,
                    FromX = _fromX,
                    ToX = _toX,
                    FromY = _fromY,
                    ToY = _toY
                });
                _isBusy = false;
            });
    }

    private async Task Click(MouseEventArgs args)
    {
        var winDims = await GetWindowDimensions();
        
        var moveX = args.OffsetX - 3 * winDims.Width / 8D;
        var moveY = args.OffsetY - 3 * winDims.Height / 8D;

        // move center of the fractal
        var shiftX = 0D;
        if (moveX != 0)
            shiftX = (_toX - _fromX) / (winDims.Width * 3D / 4)* moveX;
        
        var shiftY = 0D;
        if (moveY != 0)
            shiftY =  (_toY - _fromY) / (winDims.Height * 3D / 4) * moveY ;
        
        var m = 1 + _zoomCoeff / 2;
        if (_zoomIn)
            m = 1 / m;

        _fromX = _fromX * m + shiftX;
        _fromY = _fromY * m + shiftY;
        _toX = _toX * m + shiftX;
        _toY = _toY * m + shiftY;

        await Generate(false);
    }

    private async Task<WindowDimension> GetWindowDimensions()
    {
        return await Jsr.InvokeAsync<WindowDimension>("getWindowDimensions");
    }
}