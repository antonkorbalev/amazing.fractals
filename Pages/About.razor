@page "/About"
@using amazing.fractals.Data

<p>
    Julia set fractals are normally generated by initializing a complex number z = x + y<i>i</i>  
    where  <i>i</i><sup>2</sup> = -1 and x and y are image pixel coordinates in the range of about -2 to 2 (R).
    Then, z is repeatedly updated using:  z = z<sup>2</sup> + c where c is another complex number that gives a specific Julia set. 
    </p>
<p>
    After numerous iterations, if the magnitude of z is less than R we say that pixel is in the Julia set and color it accordingly. 
    Performing this calculation for a whole grid of pixels gives a fractal image.
</p>

Several examples:
<div class="row">
    <div class="col-sm">
        <div class="container">C = -0.8 + 0.156 * <i>i</i></div>
        <img class="img-fluid border"
             src="data:image;base64,@Convert.ToBase64String(_exBytes1)"
             alt="Fractal is unavailable"/>
    </div>
    <div class="col-sm">
        <div class="container">C = -0.4 + 0.6 * <i>i</i></div>
        <img class="img-fluid border"
             src="data:image;base64,@Convert.ToBase64String(_exBytes2)"
             alt="Fractal is unavailable"/>
    </div> 
    <div class="col-sm">
        <div class="container">C = −0.7269 + 0.1889 * <i>i</i></div>
        <img class="img-fluid border"
             src="data:image;base64,@Convert.ToBase64String(_exBytes3)"
             alt="Fractal is unavailable"/>
    </div>     
</div>    


@inject JuliaGeneratorService GeneratorService

@code {
    private byte[] _exBytes1 = new byte[0];
    private byte[] _exBytes2 = new byte[0];
    private byte[] _exBytes3 = new byte[0];
    
    protected override async Task OnInitializedAsync()
    {
        _exBytes1 = await GeneratorService.Generate(new FractalGenerationData()
        {
            ImageHeight = 300,
            ImageWidth = 300,
            CRe = -0.8,
            CIm = 0.156,
            MaxIterations = 500,
            R = 2,
            FromX = -1.5,
            ToX = 1.5,
            FromY = -1.5,
            ToY = 1.5
        });
        _exBytes2 = await GeneratorService.Generate(new FractalGenerationData()
        {
            ImageHeight = 300,
            ImageWidth = 300,
            CRe = -0.4,
            CIm = 0.6,
            MaxIterations = 500,
            R = 2,
            FromX = -1.5,
            ToX = 1.5,
            FromY = -1.5,
            ToY = 1.5
        });
        _exBytes3 = await GeneratorService.Generate(new FractalGenerationData()
        {
            ImageHeight = 300,
            ImageWidth = 300,
            CRe = -0.7269,
            CIm = 0.1889,
            MaxIterations = 500,
            R = 2,
            FromX = -1.5,
            ToX = 1.5,
            FromY = -1.5,
            ToY = 1.5
        });
    }
}